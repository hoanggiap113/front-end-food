// Chuy·ªÉn ƒë·ªïi t·ª´ HTML + Script sang ReactJS
import React, { useState, useEffect } from 'react';
import './Profile.css';

function Profile() {
  const [tab, setTab] = useState('general');
  const [title, setTitle] = useState('Th√¥ng tin chung');
  const [fullName, setFullName] = useState('Pham Quang Duc');
  const [address, setAddress] = useState('ƒê·ªãa ch·ªâ');
  const [email, setEmail] = useState('doe.mobileemail@gmail.com');
  const [phone, setPhone] = useState('');
  const [avatar, setAvatar] = useState(null);
  const [passwords, setPasswords] = useState({ current: '', new: '', confirm: '' });
  const [requirements, setRequirements] = useState({ length: false, upper: false, lower: false, number: false });

  useEffect(() => {
    document.title = title;
  }, [title]);

  const handleTabSwitch = (tabKey) => {
    setTab(tabKey);
    if (tabKey === 'security') setTitle('B·∫£o m·∫≠t');
    else if (tabKey === 'general') setTitle('Th√¥ng tin chung');
    else setTitle(tabKey);
  };

  const handleGeneralSubmit = (e) => {
    e.preventDefault();
    alert('Profile updated successfully!');
  };

  const handlePhoneUpdate = () => {
    const input = prompt('Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i:');
    if (input) setPhone(input);
  };

  const validatePassword = (value) => {
    setRequirements({
      length: value.length >= 8,
      upper: /[A-Z]/.test(value),
      lower: /[a-z]/.test(value),
      number: /\d/.test(value),
    });
  };

  const handlePasswordChange = (e) => {
    const { name, value } = e.target;
    setPasswords(prev => ({ ...prev, [name]: value }));
    if (name === 'new') validatePassword(value);
  };

  const handlePasswordSubmit = (e) => {
    e.preventDefault();
    const { current, new: newPass, confirm } = passwords;
    const allValid = Object.values(requirements).every(Boolean);
    if (!current || !newPass || !confirm) return alert('ƒêi·ªÅn ƒë·ªß th√¥ng tin.');
    if (newPass !== confirm) return alert('M·∫≠t kh·∫©u kh√¥ng kh·ªõp.');
    if (!allValid) return alert('M·∫≠t kh·∫©u ch∆∞a ƒë·∫°t y√™u c·∫ßu.');
    alert('Password changed successfully!');
    setPasswords({ current: '', new: '', confirm: '' });
    setRequirements({ length: false, upper: false, lower: false, number: false });
  };

  const handleAvatarUpload = () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/png,image/jpeg,image/jpg';
    input.onchange = (e) => setAvatar(e.target.files[0]);
    input.click();
  };

  const handleDelete = () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° t√†i kho·∫£n?')) {
      alert('ƒê√£ g·ª≠i y√™u c·∫ßu xo√° t√†i kho·∫£n.');
    }
  };

  return (
    <div className="settings-container">
      <nav className="sidebar">
        <div className="app-header">
          <div className="app-icon">AS</div>
          <span className="app-title">Th√¥ng tin c√° nh√¢n</span>
        </div>
        <div className="menu-section">
          <div className="menu-label">Th√¥ng tin chung</div>
          <button className={`menu-item ${tab === 'general' ? 'active' : ''}`} onClick={() => handleTabSwitch('general')}>üìã Th√¥ng tin</button>
          <button className={`menu-item ${tab === 'security' ? 'active' : ''}`} onClick={() => handleTabSwitch('security')}>üîí B·∫£o m·∫≠t</button>
        </div>
        <div className="menu-section">
          <div className="menu-label">Other</div>
          <button className="menu-item">üí¨ Contact support</button>
          <button className="menu-item">üö™ ƒêƒÉng xu·∫•t</button>
        </div>
      </nav>

      <main className="main-content">
        <div className="content-header">
          <h1 className="content-title">{title}</h1>
        </div>

        {tab === 'general' && (
          <div className="tab-content active">
            <div className="profile-section">
              <div className="profile-avatar">SE</div>
              <div className="profile-info">
                <div className="profile-title">·∫¢nh c√° nh√¢n</div>
                <div className="profile-subtitle">H·ªó tr·ª£ ·∫£nh PNG, JPG d∆∞·ªõi 100MB</div>
                <button className="btn btn-secondary" onClick={handleAvatarUpload}>T·∫£i ·∫£nh l√™n</button>
              </div>
            </div>

            <form onSubmit={handleGeneralSubmit} id="general-form">
              <div className="form-group">
                <label className="form-label">H·ªç v√† t√™n</label>
                <input className="form-input" value={fullName} onChange={e => setFullName(e.target.value)} />
              </div>
              <div className="form-group">
                <label className="form-label">ƒê·ªãa ch·ªâ giao h√†ng</label>
                <input className="form-input" value={address} onChange={e => setAddress(e.target.value)} />
              </div>
              <div className="form-group">
                <label className="form-label">Email</label>
                <div style={{ display: 'flex', gap: 12 }}>
                  <input className="form-input" type="email" value={email} onChange={e => setEmail(e.target.value)} style={{ flex: 1 }} />
                  <span className="verify-badge">Verify</span>
                </div>
              </div>
              <div className="phone-section">
                <div>
                  <div className="form-label" style={{ marginBottom: 4 }}>S·ªë ƒëi·ªán tho·∫°i</div>
                  <div className="phone-info">{phone || 'Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i'}</div>
                </div>
                <button type="button" className="btn btn-secondary" onClick={handlePhoneUpdate}>
                  {phone ? 'C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i' : 'Th√™m s·ªë ƒëi·ªán tho·∫°i'}
                </button>
              </div>
              <div className="form-actions">
                <button type="submit" className="btn btn-primary">C·∫≠p nh·∫≠t</button>
              </div>
            </form>

            <div className="deactivate-section">
              <div className="deactivate-title">Xo√° t√†i kho·∫£n</div>
              <div className="deactivate-subtitle">ƒêi·ªÅu n√†y s·∫Ω l√†m m·∫•t th√¥ng tin c·ªßa b·∫°n</div>
              <button className="btn btn-danger" onClick={handleDelete}>Xo√° t√†i kho·∫£n</button>
            </div>
          </div>
        )}

        {tab === 'security' && (
          <div className="tab-content active">
            <div className="security-section">
              <div className="security-header">
                <h3 className="security-title">ƒê·ªïi m·∫≠t kh·∫©u</h3>
                <p className="security-subtitle">C·∫≠p nh·∫≠t m·∫≠t kh·∫©u ƒë·ªÉ b·∫£o m·∫≠t t√†i kho·∫£n</p>
              </div>
              <form onSubmit={handlePasswordSubmit} className="password-form">
                <div className="form-group">
                  <label className="form-label">M·∫≠t kh·∫©u hi·ªán t·∫°i</label>
                  <input name="current" type="password" className="form-input" value={passwords.current} onChange={handlePasswordChange} />
                </div>
                <div className="form-group">
                  <label className="form-label">M·∫≠t kh·∫©u m·ªõi</label>
                  <input name="new" type="password" className="form-input" value={passwords.new} onChange={handlePasswordChange} />
                  <div className="password-requirements">
                    <small className={`requirement ${requirements.length ? 'valid' : ''}`}>√çt nh·∫•t 8 k√Ω t·ª±</small>
                    <small className={`requirement ${requirements.upper ? 'valid' : ''}`}>Ch·ªØ in hoa</small>
                    <small className={`requirement ${requirements.lower ? 'valid' : ''}`}>Ch·ªØ th∆∞·ªùng</small>
                    <small className={`requirement ${requirements.number ? 'valid' : ''}`}>S·ªë</small>
                  </div>
                </div>
                <div className="form-group">
                  <label className="form-label">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
                  <input name="confirm" type="password" className="form-input" value={passwords.confirm} onChange={handlePasswordChange} />
                  <div className={`password-match-indicator ${passwords.confirm ? (passwords.new === passwords.confirm ? 'match' : 'no-match') : ''}`}>
                    {passwords.confirm && (passwords.new === passwords.confirm ? '‚úì Kh·ªõp' : '‚úó Kh√¥ng kh·ªõp')}
                  </div>
                </div>
                <div className="form-actions">
                  <button type="submit" className="btn btn-primary">ƒê·ªïi m·∫≠t kh·∫©u</button>
                </div>
              </form>
            </div>
          </div>
        )}
      </main>
    </div>
  );
}

export default Profile;
